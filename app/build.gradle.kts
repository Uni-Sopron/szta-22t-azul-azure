/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

 repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    pmd
    id("io.freefair.aggregate-javadoc") version "6.4.1"
}


dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.2")
    testImplementation("org.mockito:mockito-core:3.+")
    // This dependency is used by the application.
    implementation("com.google.guava:guava:30.1.1-jre")
}

application {
    // Define the main class for the application.
    mainClass.set("azul.App")
}

tasks.withType<Jar> {
    manifest {
        attributes["Main-Class"] = "azul.App"
    }
}

tasks.register<JavaExec>("runWithJavaExec") {
    description = "Run the main class with JavaExecTask"
    mainClass.set("azul.App")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// This will automatically run on the build action alongside with the compile and test task. Yey :)
pmd {

    isIgnoreFailures = true
    isConsoleOutput = true
    toolVersion = "6.44.0"
    ruleSets = listOf()
    ruleSetConfig = resources.text.fromFile("../ruleset.xml")
}

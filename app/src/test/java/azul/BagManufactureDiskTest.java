/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package azul;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

class BagManufactureDiskTest {

    Bag bag;
    ManufactureDisk[] disks;

    @BeforeEach
    void init() {
        bag = new Bag();
    }

    @ParameterizedTest
    @ValueSource(ints = {3, 5, 7})
    void Manufacturedisks_have_four_tiles_after_shuffle(int diskNum) {
        disks = new ManufactureDisk[diskNum];
        for (int i = 0; i < diskNum; i++) {
            disks[i] = new ManufactureDisk();
        }

        assertDoesNotThrow(() -> bag.shuffleTo(disks));

        for (var disk : disks) {
            assertEquals(4, disk.getTiles().size());
        }

        assertThrows(IllegalStateException.class, () -> bag.shuffleTo(disks));
    }

    @Test
    @Order(1)
    void Bag_has_exactly_100_tiles() {

        disks = new ManufactureDisk[25];
        for (int i = 0; i < 25; i++) {
            disks[i] = new ManufactureDisk();
        }
        bag.shuffleTo(disks);

        var poppedTilesSize = ((List<Tile>) Arrays.asList(disks).stream().map(d -> d.getTiles())
                .flatMap(Collection::stream).collect(Collectors.toList())).size();
        assertEquals(100, poppedTilesSize);
    }

    @Test
    @Order(2)
    void Bag_colors_equally_distributed() {

        disks = new ManufactureDisk[25];
        for (int i = 0; i < 25; i++) {
            disks[i] = new ManufactureDisk();
        }
        bag.shuffleTo(disks);
        var poppedTiles = (List<Tile>) Arrays.asList(disks).stream().map(d -> d.getTiles()).toList()
                .stream().flatMap(Collection::stream).collect(Collectors.toList());

        var occurences = poppedTiles.stream().map(t -> t.getColor())
                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));

        assertEquals(5, occurences.size());
        for (var occurenceCount : occurences.values()) {
            assertEquals(20, occurenceCount);
        }
    }
}
